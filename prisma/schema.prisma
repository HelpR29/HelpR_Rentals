// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  role      String   // "tenant" | "host" | "admin"
  name      String?
  bio       String?
  avatar    String?
  phone     String?
  verified  Boolean  @default(false) // Overall verification status
  
  // Detailed verification fields
  emailVerified    Boolean @default(false)
  phoneVerified    Boolean @default(false)
  idVerified       Boolean @default(false)
  addressVerified  Boolean @default(false)
  incomeVerified   Boolean @default(false)
  backgroundVerified Boolean @default(false)
  
  // Verification metadata (JSON strings)
  verificationData String? // JSON object with verification details
  verificationDocs String? // JSON array of uploaded document URLs
  
  createdAt DateTime @default(now())
  listings  Listing[]
  apps      Application[]
  sentMessages     Message[] @relation("MessageSender")
  receivedMessages Message[] @relation("MessageReceiver")
  givenReviews     Review[] @relation("ReviewAuthor")
  receivedReviews  Review[] @relation("ReviewTarget")

  // Chat / Notifications back-relations
  chatParticipants ChatParticipant[]
  chatMessagesSent ChatMessage[]    @relation("ChatMessageSender")
  chatReads        ChatRead[]
  notifications    Notification[]
}

model Listing {
  id            String        @id @default(cuid())
  owner         User          @relation(fields: [ownerId], references: [id])
  ownerId       String
  title         String
  description   String
  address       String
  rent          Int
  deposit       Int?
  availableFrom DateTime
  availableTo   DateTime?
  furnished     Boolean       @default(false)
  petsAllowed   Boolean       @default(false)
  bedrooms      Int?          // Number of bedrooms
  bathrooms     Float?        // Number of bathrooms (can be 1.5, 2.5, etc.)
  photos        String?       // JSON string of photo URLs array
  aiFlags       String?       // JSON object with AI-generated content and flags
  neighborhoodInsights String? // JSON object with AI-generated neighborhood analysis
  flagged       Boolean       @default(false)
  // Utilities and expenses
  utilitiesIncluded String?    // JSON object with utilities details
  waterIncluded Boolean       @default(false)
  heatIncluded  Boolean       @default(false)
  electricityIncluded Boolean @default(false)
  internetIncluded Boolean    @default(false)
  cableIncluded Boolean       @default(false)
  parkingType   String?       // "garage", "street", "driveway", "none"
  parkingCost   Int?          // Monthly parking cost if not included
  laundryType   String?       // "in_unit", "in_building", "nearby", "none"
  createdAt     DateTime      @default(now())
  applications  Application[]
  reviews       Review[]
}

model Application {
  id           String   @id @default(cuid())
  listing      Listing  @relation(fields: [listingId], references: [id])
  listingId    String
  applicant    User     @relation(fields: [applicantId], references: [id])
  applicantId  String
  moveInDate   DateTime
  duration     String
  reason       String
  status       String   @default("submitted") // submitted | accepted | declined
  aiSummary    String?
  createdAt    DateTime @default(now())
  messages     Message[]
}

model Message {
  id          String   @id @default(cuid())
  content     String
  sender      User     @relation("MessageSender", fields: [senderId], references: [id])
  senderId    String
  receiver    User     @relation("MessageReceiver", fields: [receiverId], references: [id])
  receiverId  String
  application Application @relation(fields: [applicationId], references: [id])
  applicationId String
  createdAt   DateTime @default(now())
}

model Review {
  id          String   @id @default(cuid())
  rating      Int      // 1-5 stars
  comment     String?
  author      User     @relation("ReviewAuthor", fields: [authorId], references: [id])
  authorId    String
  target      User     @relation("ReviewTarget", fields: [targetId], references: [id])
  targetId    String
  listing     Listing? @relation(fields: [listingId], references: [id])
  listingId   String?
  type        String   // "host_review" | "tenant_review" | "listing_review"
  createdAt   DateTime @default(now())
}

// =============================
// Chat / Messaging (Phase 1)
// =============================

model ChatConversation {
  id            String             @id @default(cuid())
  createdAt     DateTime           @default(now())
  updatedAt     DateTime           @updatedAt
  isGroup       Boolean            @default(false)
  title         String?
  lastMessageAt DateTime?          @map("last_message_at")

  participants  ChatParticipant[]
  messages      ChatMessage[]
}

model ChatParticipant {
  id             String           @id @default(cuid())
  conversation   ChatConversation @relation(fields: [conversationId], references: [id])
  conversationId String
  user           User             @relation(fields: [userId], references: [id])
  userId         String
  role           String           @default("member") // member | admin
  joinedAt       DateTime         @default(now())

  @@unique([conversationId, userId])
}

model ChatMessage {
  id             String           @id @default(cuid())
  conversation   ChatConversation @relation(fields: [conversationId], references: [id])
  conversationId String
  sender         User             @relation("ChatMessageSender", fields: [senderId], references: [id])
  senderId       String
  body           String
  attachmentUrl  String?
  status         String           @default("sent") // sent | delivered | read
  createdAt      DateTime         @default(now())

  reads          ChatRead[]
}

model ChatRead {
  id         String      @id @default(cuid())
  message    ChatMessage @relation(fields: [messageId], references: [id])
  messageId  String
  user       User        @relation(fields: [userId], references: [id])
  userId     String
  readAt     DateTime    @default(now())

  @@unique([messageId, userId])
}

// =============================
// Notifications
// =============================

model Notification {
  id        String   @id @default(cuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  type      String   // message | application | system
  payload   String   // JSON
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())

  @@index([userId, isRead])
}
